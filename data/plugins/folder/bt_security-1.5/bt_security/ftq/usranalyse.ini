;;; REQUIRED Section
;
[usranalyse]



;;; Log Message Format specification
;
; May consist of:
; - arbitrary text, which is copied to log message as-is,
; - calls to data sources without arguments: %{datasourcename}
; - calls to data sources with    argument : %{datasourcename:arg1}
; - calls to data sources with    arguments: %{datasourcename:arg1,arg2}   <--- if data source supports it
;
; List of available data sources:
; - %{cmdline}        ; (available=yes) Full command line, with arguments
; - %{cwd}            ; (available=yes) Current working directory
; - %{datetime}       ; (available=yes) Date and time in ISO 8601 format
; - %{domain}         ; (available=yes) Domain of current system
; - %{egid}           ; (available=yes) Effective gid that executed the command
; - %{egroup}         ; (available=yes) Effective group name that executed the command
; - %{env:VAR}        ; (available=yes) Environmental variable named 'VAR'
; - %{env_all}        ; (available=yes) All environmental varibles, comma separated
; - %{euid}           ; (available=yes) Effective uid that executed the command
; - %{eusername}      ; (available=yes) Effective username that executed the command
; - %{filename}       ; (available=yes) Full path to executable
; - %{gid}            ; (available=yes) Group id that executed the command
; - %{group}          ; (available=yes) Group name that executed the command
; - %{hostname}       ; (available=yes) Hostname of current system
; - %{login}          ; (available=yes) Login name (tries getlogin_r() first, then SUDO_USER env variabe, and LOGNAME env as last resort)
; - %{pid}            ; (available=yes) ID of process that executed the command
; - %{ppid}           ; (available=yes) Parent process ID of process that executed the command
; - %{rpname}         ; (available=yes) Root process name of process that executed the command
; - %{sid}            ; (available=yes) Process id of session group process leader
; - %{usranalyse_threads} ; (available=yes) Number of threads that usranalyse currently is configured for
; - %{usranalyse_version} ; (available=yes) usranalyse version
; - %{usranalyse_literal:arg} ; (available=yes) Dummy data source, only returns its argument literally
; - %{tid}            ; (available=yes) Thread ID of process that executed the command
; - %{tid_kernel}     ; (available=yes) Thread ID of process that executed the command, as returned by Linux kernel
; - %{timestamp}      ; (available=yes) Current Unix timestamp
; - %{timestamp_ms}   ; (available=yes) Millisecond part of current Unix timestamp
; - %{timestamp_us}   ; (available=yes) Microsecond part of current Unix timestamp
; - %{tty}            ; (available=yes) Which TTY the command was run on
; - %{tty_uid}        ; (available=yes) TTY uid
; - %{tty_username}   ; (available=yes) TTY username
; - %{uid}            ; (available=yes) User id that executed the command
; - %{username}       ; (available=yes) Username that executed the command
; - %{uname}       ; (available=yes) uname that executed the command
;
; Availability (yes/no):
;   This flag signifies whether this build of usranalyse has particular data source
;   built-in or not. If particular data source is not available and its use is
;   desired, then usranalyse must be rebuilt with flags that enable given data
;   source.
;
; Default value:
;   "[uid:%{uid} sid:%{sid} tty:%{tty} cwd:%{cwd} filename:%{filename}]: %{cmdline}"
;
; Default value do not changed:
message_format = "{"timestamp":"%{timestamp}","login":"%{login}","uid":"%{uid}","sid":"%{sid}","tty":"%{tty}","cwd":"%{cwd}","filename":"%{filename}","cmd":"%{cmdline}"}"

notice_defalut = "["%{timestamp}","%{uname}用户正在执行%{cmdline}命令"]"

notice_redisformat = "["%{timestamp}","%{uname}已经被入侵.正执行命令 %{cmdline} 请检查网站是否被入侵?或%{uname}是否开启对外连接?请检查 %{uname}是否设置密码."]"

notice_wwwformat = "["%{timestamp}","%{uname}用户正执行%{cmdline}命令,执行的路径%{cwd},文件为%{filename}.堡塔提醒您如果非本人操作,网站可能被入侵,请及时处理"]"

;;; whitepwdstop Chain specification
;
; Must comply with the following rules:
; - one or more filters may be specified, separated by semicolon,
; - each whitepwdstop may contain argument that follows the colon,
; - whitepwdstop may accept multiple arguments, separated by comma,
; - whitepwdstop chain must not contain any spaces (allowed in filter arguments, but generally discouraged).
;
; List of available whitepwdstop:
; - stop_pwd            ; (available=yes) stop log commands executed by these PWDs
;
; Availability (yes/no):
;   This flag signifies whether this build of usranalyse has particular whitepwdstop
;   built-in or not. If particular whitepwdstop is not available and its use is
;   desired, then usranalyse must be rebuilt with flags that enable given whitepwdstop.
;
; Sample definitions with explanations:
; - whitepwdstop_chain = "stop_pwd:www,/www/server/panel,mkdir;stop_pwd:redis,/www/server/redis,mkdir"       # Log all commands, except the ones PROCESS shell
;
; Default value:
;   "" (empty string)
;
; Examples:
whitepwdstop_chain = "stop_pwd:www,/www/server/panel,mkdir;stop_pwd:www,/www/server/speed/total,mkdir;stop_pwd:www,/www/server/total,mkdir;stop_pwd:www,/www/server/btwaf,mkdir;stop_pwd:redis,/www/server/redis/src/redis-server;stop_pwd:www,/www/wwwlogs,mkdir;stop_pwd:www,/usr/local/aegis/aegis_client" 


;;; userstop Chain specification
;
; Must comply with the following rules:
; - one or more filters may be specified, separated by semicolon,
; - each userstop may contain argument that follows the colon,
; - userstop may accept multiple arguments, separated by comma,
; - userstop chain must not contain any spaces (allowed in filter arguments, but generally discouraged).
;
; List of available userstops:
; - stop_process        ; (available=yes) stop log commands associated with a PROCESS
; - stop_uid            ; (available=yes) stop log commands executed by these UIDs
;
; Availability (yes/no):
;   This flag signifies whether this build of usranalyse has particular userstop
;   built-in or not. If particular userstop is not available and its use is
;   desired, then usranalyse must be rebuilt with flags that enable given userstop.
;
; Sample definitions with explanations:
; - userstop_chain = "stop_process:shell"       # Log all commands, except the ones PROCESS shell
; - userstop_chain = "stop_uid:1000,1002"       # stop use commands  only www redis
;
; Default value:
;   "" (empty string)
;
; Examples:
;userstop_chain = "stop_process:/bin/sh,/bin/bash"
userstop_chain = "stop_uid:www,redis,mysql"
 



;;; Filter Chain specification
;
; Must comply with the following rules:
; - one or more filters may be specified, separated by semicolon,
; - each filter may contain argument that follows the colon,
; - filter may accept multiple arguments, separated by comma,
; - filter chain must not contain any spaces (allowed in filter arguments, but generally discouraged).
;
; List of available filters:
; - exclude_spawns_of   ; (available=yes) Exclude log entries that occur in specified process trees
; - exclude_uid         ; (available=yes) Exclude these UIDs from logging
; - only_root           ; (available=yes) Only log root commands
; - only_tty            ; (available=yes) Only log commands associated with a TTY
; - only_uid            ; (available=yes) Only log commands executed by these UIDs
;
; Availability (yes/no):
;   This flag signifies whether this build of usranalyse has particular filter
;   built-in or not. If particular filter is not available and its use is
;   desired, then usranalyse must be rebuilt with flags that enable given filter.
;
; Sample definitions with explanations:
; - filter_chain = "exclude_uid:0"       # Log all commands, except the ones executed by root
; - filter_chain = "exclude_uid:1,2,3"   # Log all commands, except those executed by users with UIDs 1, 2 and 3
; - filter_chain = "only_uid:0"          # Log only root commands
; - filter_chain = "exclude_spawns_of:crond,my_daemon" # Do not log commands spawned by cron or my_daemon
; - filter_chain = "filter1:arg11;filter2:arg21,arg22;filter3:arg31,32,33"
;
; Default value:
;   "" (empty string)
;
; Examples:
;filter_chain = "only_uid:0"
;filter_chain = "exclude_uid:1000"
filter_chain = "exclude_spawns_of:crond,BT-Panel,BT-Task;exclude_uid:"


;;; Output
;
; Where messages get sent to
;
; List of available outputs:
; - devlog   ; (available=yes) Default, writes directly to /dev/log.
; - devnull  ; (available=yes) Black hole.
; - devtty   ; (available=yes) Write to current tty via /dev/tty.
; - file     ; (available=yes) Write directly to file. (NOTICE: Make sure file has proper permissions set for non-root users.)
; - socket   ; (available=yes) Built-in output. As argument it requires an absolute path of socket to write to.
; - stderr   ; (available=yes) Write to STDERR. Mainly useful for debugging purposes.
; - stdout   ; (available=yes) Write to STDOUT. Mainly useful for debugging purposes.
; - syslog   ; (available=no) Previuosly-default (WARNING: DO NOT USE syslog OUTPUT WITH systemd - IT WILL HANG YOUR SYSTEM ON BOOT)
;
; Availability (yes/no):
;   This flag signifies whether this build of usranalyse has particular output
;   built-in or not. If particular output is not available and its use is
;   desired, then usranalyse must be rebuilt with flags that enable given output.
;
; List of outputs pending implementation (patches welcome!):
; - console                           ; TODO
; - journald                          ; TODO
;
; Default value: 
;   devlog
;   (previously 'syslog' was default value, but due to systemd issues default was changed)
;   (to raw device writing as syslogd blocks syslog() calls if journald is not running)
;
; Default value  do not changed:
output = file:/usr/local/usranalyse/logs
